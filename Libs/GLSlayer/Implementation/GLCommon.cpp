
#include "GLCommon.h"

namespace gls::internals
{

const GLenum __resourceTypeTable[] =
{
	GL_BUFFER,
	GL_PROGRAM,
	GL_TEXTURE,
	GL_FRAMEBUFFER,
	GL_RENDERBUFFER,
	GL_TRANSFORM_FEEDBACK,
	GL_SAMPLER,
};

const GLenum __bufferTypeTable[] =
{
	GL_ARRAY_BUFFER,
	GL_ELEMENT_ARRAY_BUFFER,
	GL_PIXEL_PACK_BUFFER,
	GL_PIXEL_UNPACK_BUFFER,
	GL_TEXTURE_BUFFER,
	GL_UNIFORM_BUFFER,
	GL_TRANSFORM_FEEDBACK_BUFFER,
	GL_DRAW_INDIRECT_BUFFER,
	GL_DISPATCH_INDIRECT_BUFFER,
	GL_ATOMIC_COUNTER_BUFFER,
	GL_SHADER_STORAGE_BUFFER,
	GL_QUERY_BUFFER,
};

const GLenum __shaderTypeTable[] =
{
	GL_VERTEX_SHADER,
	GL_GEOMETRY_SHADER,
	GL_TESS_CONTROL_SHADER,
	GL_TESS_EVALUATION_SHADER,
	GL_FRAGMENT_SHADER,
	GL_COMPUTE_SHADER,
};

const GLenum __textureTypeTable[] =
{
	GL_TEXTURE_1D,
	GL_TEXTURE_2D,
	GL_TEXTURE_2D_MULTISAMPLE,
	GL_TEXTURE_3D,
	GL_TEXTURE_CUBE_MAP,
	GL_TEXTURE_1D_ARRAY,
	GL_TEXTURE_2D_ARRAY,
	GL_TEXTURE_2D_MULTISAMPLE_ARRAY,
	GL_TEXTURE_CUBE_MAP_ARRAY,
	GL_TEXTURE_RECTANGLE,
};

const GLenum __queryTypeTable[] =
{
	0,
	GL_SAMPLES_PASSED,
	GL_ANY_SAMPLES_PASSED,
	GL_ANY_SAMPLES_PASSED_CONSERVATIVE,
	GL_PRIMITIVES_GENERATED,
	GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN,
	GL_TIME_ELAPSED,
	GL_TIMESTAMP,
};

const GLenum __dataTypeTable[] =
{
	GL_NONE,
	GL_UNSIGNED_BYTE,
	GL_BYTE,
	GL_UNSIGNED_SHORT,
	GL_SHORT,
	GL_UNSIGNED_INT,
	GL_INT,
	GL_INT_2_10_10_10_REV,
	GL_HALF_FLOAT,
	GL_FLOAT,
	GL_DOUBLE,
	GL_FIXED,
	GL_UNSIGNED_BYTE_3_3_2,
	GL_UNSIGNED_BYTE_2_3_3_REV,
	GL_UNSIGNED_SHORT_5_6_5,
	GL_UNSIGNED_SHORT_5_6_5_REV,
	GL_UNSIGNED_SHORT_4_4_4_4,
	GL_UNSIGNED_SHORT_4_4_4_4_REV,
	GL_UNSIGNED_SHORT_5_5_5_1,
	GL_UNSIGNED_SHORT_1_5_5_5_REV,
	GL_UNSIGNED_INT_8_8_8_8,
	GL_UNSIGNED_INT_8_8_8_8_REV,
	GL_UNSIGNED_INT_10_10_10_2,
	GL_UNSIGNED_INT_2_10_10_10_REV,
	GL_UNSIGNED_INT_24_8,
	GL_UNSIGNED_INT_10F_11F_11F_REV,
	GL_UNSIGNED_INT_5_9_9_9_REV,
	GL_FLOAT_32_UNSIGNED_INT_24_8_REV,
};

const GLenum __shaderDataTypeTable[] =
{
	GL_FLOAT,
	GL_FLOAT_VEC2,
	GL_FLOAT_VEC3,
	GL_FLOAT_VEC4,
	GL_DOUBLE,
	GL_DOUBLE_VEC2,
	GL_DOUBLE_VEC3,
	GL_DOUBLE_VEC4,
	GL_INT,
	GL_INT_VEC2,
	GL_INT_VEC3,
	GL_INT_VEC4,
	GL_UNSIGNED_INT,
	GL_UNSIGNED_INT_VEC2,
	GL_UNSIGNED_INT_VEC3,
	GL_UNSIGNED_INT_VEC4,
	GL_BOOL,
	GL_BOOL_VEC2,
	GL_BOOL_VEC3,
	GL_BOOL_VEC4,
	GL_FLOAT_MAT2,
	GL_FLOAT_MAT3,
	GL_FLOAT_MAT4,
	GL_FLOAT_MAT2x3,
	GL_FLOAT_MAT2x4,
	GL_FLOAT_MAT3x2,
	GL_FLOAT_MAT3x4,
	GL_FLOAT_MAT4x2,
	GL_FLOAT_MAT4x3,
	GL_DOUBLE_MAT2,
	GL_DOUBLE_MAT3,
	GL_DOUBLE_MAT4,
	GL_DOUBLE_MAT2x3,
	GL_DOUBLE_MAT2x4,
	GL_DOUBLE_MAT3x2,
	GL_DOUBLE_MAT3x4,
	GL_DOUBLE_MAT4x2,
	GL_DOUBLE_MAT4x3,
	GL_SAMPLER_1D,
	GL_SAMPLER_2D,
	GL_SAMPLER_3D,
	GL_SAMPLER_CUBE,
	GL_SAMPLER_1D_SHADOW,
	GL_SAMPLER_2D_SHADOW,
	GL_SAMPLER_1D_ARRAY,
	GL_SAMPLER_2D_ARRAY,
	GL_SAMPLER_1D_ARRAY_SHADOW,
	GL_SAMPLER_2D_ARRAY_SHADOW,
	GL_SAMPLER_2D_MULTISAMPLE,
	GL_SAMPLER_2D_MULTISAMPLE_ARRAY,
	GL_SAMPLER_CUBE_SHADOW,
	GL_SAMPLER_BUFFER,
	GL_SAMPLER_2D_RECT,
	GL_SAMPLER_2D_RECT_SHADOW,
	GL_INT_SAMPLER_1D,
	GL_INT_SAMPLER_2D,
	GL_INT_SAMPLER_3D,
	GL_INT_SAMPLER_CUBE,
	GL_INT_SAMPLER_1D_ARRAY,
	GL_INT_SAMPLER_2D_ARRAY,
	GL_INT_SAMPLER_2D_MULTISAMPLE,
	GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY,
	GL_INT_SAMPLER_BUFFER,
	GL_INT_SAMPLER_2D_RECT,
	GL_UNSIGNED_INT_SAMPLER_1D,
	GL_UNSIGNED_INT_SAMPLER_2D,
	GL_UNSIGNED_INT_SAMPLER_3D,
	GL_UNSIGNED_INT_SAMPLER_CUBE,
	GL_UNSIGNED_INT_SAMPLER_1D_ARRAY,
	GL_UNSIGNED_INT_SAMPLER_2D_ARRAY,
	GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE,
	GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY,
	GL_UNSIGNED_INT_SAMPLER_BUFFER,
	GL_UNSIGNED_INT_SAMPLER_2D_RECT,
};

const GLenum __imageFormatTable[] =
{
	GL_NONE,
	GL_DEPTH_COMPONENT,
	GL_DEPTH_STENCIL,
	GL_STENCIL_INDEX,
	GL_RED,
	GL_GREEN,
	GL_BLUE,
	GL_RG,
	GL_RGB,
	GL_RGBA,
	GL_BGR,
	GL_BGRA,
	GL_RED_INTEGER,
	GL_GREEN_INTEGER,
	GL_BLUE_INTEGER,
	GL_RG_INTEGER,
	GL_RGB_INTEGER,
	GL_RGBA_INTEGER,
	GL_BGR_INTEGER,
	GL_BGRA_INTEGER,
};

const GLenum __pixelFormatTable[] =
{
	GL_NONE,

	// integer formats
	GL_R8,
	GL_R16,
	GL_RG8,
	GL_RG16,
	GL_R3_G3_B2,
	GL_RGB4,
	GL_RGB5,
	GL_RGB8,
	GL_RGB10,
	GL_RGB12,
	GL_RGB16,
	GL_RGBA2,
	GL_RGBA4,
	GL_RGB5_A1,
	GL_RGBA8,
	GL_RGB10_A2,
	GL_RGBA12,
	GL_RGBA16,
	GL_SRGB8,
	GL_SRGB8_ALPHA8,

	// signed normalized integer formats
	GL_RED_SNORM,
	GL_RG_SNORM,
	GL_RGB_SNORM,
	GL_RGBA_SNORM,
	GL_R8_SNORM,
	GL_RG8_SNORM,
	GL_RGB8_SNORM,
	GL_RGBA8_SNORM,
	GL_R16_SNORM,
	GL_RG16_SNORM,
	GL_RGB16_SNORM,
	GL_RGBA16_SNORM,

	// floating point formats
	GL_R16F,
	GL_RG16F,
	GL_RGB16F,
	GL_RGBA16F,
	GL_R32F,
	GL_RG32F,
	GL_RGB32F,
	GL_RGBA32F,
	GL_R11F_G11F_B10F,
	GL_RGB9_E5,

	// pure integer formats
	GL_R8I,
	GL_R8UI,
	GL_R16I,
	GL_R16UI,
	GL_R32I,
	GL_R32UI,
	GL_RG8I,
	GL_RG8UI,
	GL_RG16I,
	GL_RG16UI,
	GL_RG32I,
	GL_RG32UI,
	GL_RGB8I,
	GL_RGB8UI,
	GL_RGB16I,
	GL_RGB16UI,
	GL_RGB32I,
	GL_RGB32UI,
	GL_RGBA8I,
	GL_RGBA8UI,
	GL_RGB10_A2UI,
	GL_RGBA16I,
	GL_RGBA16UI,
	GL_RGBA32I,
	GL_RGBA32UI,

	// depth-stencil formats
	GL_DEPTH_COMPONENT16,
	GL_DEPTH_COMPONENT24,
	GL_DEPTH_COMPONENT32,
	GL_DEPTH_COMPONENT32F,
	GL_DEPTH24_STENCIL8,
	GL_DEPTH32F_STENCIL8,
	GL_STENCIL_INDEX1,
	GL_STENCIL_INDEX4,
	GL_STENCIL_INDEX8,
	GL_STENCIL_INDEX16,

	// compressed formats
	GL_COMPRESSED_RED,
	GL_COMPRESSED_RG,
	GL_COMPRESSED_RGB,
	GL_COMPRESSED_RGBA,
	GL_COMPRESSED_SRGB,
	GL_COMPRESSED_SRGB_ALPHA,
	GL_COMPRESSED_RED_RGTC1,
	GL_COMPRESSED_SIGNED_RED_RGTC1,
	GL_COMPRESSED_RG_RGTC2,
	GL_COMPRESSED_SIGNED_RG_RGTC2,
	GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
	GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
	GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
	GL_COMPRESSED_RGBA_S3TC_DXT5_EXT,
	GL_COMPRESSED_SRGB_S3TC_DXT1_EXT,
	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,
	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,
	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,
	GL_COMPRESSED_RGBA_BPTC_UNORM_ARB,
	GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB,
	GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB,
	GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB,
	GL_COMPRESSED_RGB8_ETC2,
	GL_COMPRESSED_SRGB8_ETC2,
	GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,
	GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,
	GL_COMPRESSED_RGBA8_ETC2_EAC,
	GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,
	GL_COMPRESSED_R11_EAC,
	GL_COMPRESSED_SIGNED_R11_EAC,
	GL_COMPRESSED_RG11_EAC,
	GL_COMPRESSED_SIGNED_RG11_EAC,
};

const GLenum __cubeFaceTable[] =
{
	GL_TEXTURE_CUBE_MAP_POSITIVE_X,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,
};

const GLenum __bufferAccessTable[] =
{
	GL_READ_ONLY,
	GL_WRITE_ONLY,
	GL_READ_WRITE,
};

const GLenum __colorBufferTable[] =
{
	GL_NONE,

	GL_FRONT_LEFT,
	GL_FRONT_RIGHT,
	GL_BACK_LEFT,
	GL_BACK_RIGHT,

	GL_COLOR_ATTACHMENT0,
	GL_COLOR_ATTACHMENT1,
	GL_COLOR_ATTACHMENT2,
	GL_COLOR_ATTACHMENT3,
	GL_COLOR_ATTACHMENT4,
	GL_COLOR_ATTACHMENT5,
	GL_COLOR_ATTACHMENT6,
	GL_COLOR_ATTACHMENT7,
	GL_COLOR_ATTACHMENT8,
	GL_COLOR_ATTACHMENT9,
	GL_COLOR_ATTACHMENT10,
	GL_COLOR_ATTACHMENT11,
	GL_COLOR_ATTACHMENT12,
	GL_COLOR_ATTACHMENT13,
	GL_COLOR_ATTACHMENT14,
	GL_COLOR_ATTACHMENT15,
};

const GLenum __attachmentBufferTable[] =
{
	GL_COLOR_ATTACHMENT0,
	GL_COLOR_ATTACHMENT1,
	GL_COLOR_ATTACHMENT2,
	GL_COLOR_ATTACHMENT3,
	GL_COLOR_ATTACHMENT4,
	GL_COLOR_ATTACHMENT5,
	GL_COLOR_ATTACHMENT6,
	GL_COLOR_ATTACHMENT7,
	GL_COLOR_ATTACHMENT8,
	GL_COLOR_ATTACHMENT9,
	GL_COLOR_ATTACHMENT10,
	GL_COLOR_ATTACHMENT11,
	GL_COLOR_ATTACHMENT12,
	GL_COLOR_ATTACHMENT13,
	GL_COLOR_ATTACHMENT14,
	GL_COLOR_ATTACHMENT15,
	GL_DEPTH_ATTACHMENT,
	GL_STENCIL_ATTACHMENT,
	GL_DEPTH_STENCIL_ATTACHMENT,
};

const GLenum __polygonFaceTable[] =
{
	GL_FRONT,
	GL_BACK,
	GL_FRONT_AND_BACK,
};

const GLenum __primitiveTypeTable[] =
{
	GL_POINTS,
	GL_LINES,
	GL_LINES_ADJACENCY,
	GL_LINE_STRIP,
	GL_LINE_STRIP_ADJACENCY,
	GL_LINE_LOOP,
	GL_TRIANGLES,
	GL_TRIANGLES_ADJACENCY,
	GL_TRIANGLE_STRIP,
	GL_TRIANGLE_STRIP_ADJACENCY,
	GL_TRIANGLE_FAN,
	GL_PATCHES,
};

const GLenum __tessGenPrimitiveTypeTable[] =
{
	GL_QUADS,
	GL_TRIANGLES,
	GL_ISOLINES,
};

const GLenum __tessGenSpacingTable[] =
{
	GL_EQUAL,
	GL_FRACTIONAL_EVEN,
	GL_FRACTIONAL_ODD,
};

const GLenum __rasterModeTable[] =
{
	GL_POINT,
	GL_LINE,
	GL_FILL,
};

const GLenum __vertexOrderTable[] =
{
	GL_CW,
	GL_CCW,
};

const GLenum __compareFuncTable[] =
{
	GL_NEVER,
	GL_LESS,
	GL_EQUAL,
	GL_LEQUAL,
	GL_GREATER,
	GL_NOTEQUAL,
	GL_GEQUAL,
	GL_ALWAYS,
};

const GLenum __stencilOpTable[] =
{
	GL_KEEP,
	GL_ZERO,
	GL_REPLACE,
	GL_INCR,
	GL_INCR_WRAP,
	GL_DECR,
	GL_DECR_WRAP,
	GL_INVERT,
};

const GLenum __blendOpTable[] =
{
	GL_FUNC_ADD,
	GL_FUNC_SUBTRACT,
	GL_FUNC_REVERSE_SUBTRACT,
	GL_MIN,
	GL_MAX,
};

const GLenum __blendFuncTable[] =
{
	GL_ZERO,
	GL_ONE,
	GL_SRC_COLOR,
	GL_ONE_MINUS_SRC_COLOR,
	GL_DST_COLOR,
	GL_ONE_MINUS_DST_COLOR,
	GL_SRC_ALPHA,
	GL_ONE_MINUS_SRC_ALPHA,
	GL_DST_ALPHA,
	GL_ONE_MINUS_DST_ALPHA,
	GL_CONSTANT_COLOR,
	GL_ONE_MINUS_CONSTANT_COLOR,
	GL_CONSTANT_ALPHA,
	GL_ONE_MINUS_CONSTANT_ALPHA,
	GL_SRC_ALPHA_SATURATE,
	GL_SRC1_COLOR,
	GL_SRC1_ALPHA,
	GL_ONE_MINUS_SRC1_COLOR,
	GL_ONE_MINUS_SRC1_ALPHA,
};

const GLenum __colorReadClampTable[] =
{
	GL_FALSE,
	GL_TRUE,
	GL_FIXED_ONLY,
};

const GLenum __logicOpTable[] =
{
	GL_CLEAR,
	GL_AND,
	GL_AND_REVERSE,
	GL_COPY,
	GL_AND_INVERTED,
	GL_NOOP,
	GL_XOR,
	GL_OR,
	GL_NOR,
	GL_EQUIV,
	GL_INVERT,
	GL_OR_REVERSE,
	GL_COPY_INVERTED,
	GL_OR_INVERTED,
	GL_NAND,
	GL_SET,
};

const GLenum __texAddressingModeTable[] =
{
	GL_CLAMP_TO_BORDER,
	GL_CLAMP_TO_EDGE,
	GL_REPEAT,
	GL_MIRRORED_REPEAT,
	GL_MIRROR_CLAMP_TO_EDGE,
};

const GLenum __texFilterTable[] =
{
	GL_NEAREST,
	GL_LINEAR,
	GL_NEAREST_MIPMAP_NEAREST,
	GL_NEAREST_MIPMAP_LINEAR,
	GL_LINEAR_MIPMAP_NEAREST,
	GL_LINEAR_MIPMAP_LINEAR,
};

const GLenum __texCompareMode[] =
{
	GL_NONE,
	GL_COMPARE_REF_TO_TEXTURE,
};

const GLenum __framebufferStatusTable[] =
{
	GL_FRAMEBUFFER_COMPLETE,
	GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT,
	GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT,
	GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER,
	GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER,
	GL_FRAMEBUFFER_UNSUPPORTED,
	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE,
	GL_FRAMEBUFFER_UNDEFINED,
};

#if defined (_WIN32)

const GLenum __swapMethodTable[] =
{
	WGL_SWAP_EXCHANGE_ARB,
	WGL_SWAP_COPY_ARB,
	WGL_SWAP_UNDEFINED_ARB,
};

const GLenum __colorBufferTypeTable[] =
{
	WGL_TYPE_RGBA_ARB,
	WGL_TYPE_RGBA_FLOAT_ARB,
};

#elif defined (__linux__)

const GLenum __swapMethodTable[] =
{
	GLX_SWAP_EXCHANGE_OML,
	GLX_SWAP_COPY_OML,
	GLX_SWAP_UNDEFINED_OML,
};

const GLenum __colorBufferTypeTable[] =
{
	GLX_RGBA_BIT,
	GLX_RGBA_FLOAT_BIT_ARB,
};

#endif

const GLenum __programParamTable[] =
{
	GL_GEOMETRY_VERTICES_OUT,
	GL_GEOMETRY_INPUT_TYPE,
	GL_GEOMETRY_OUTPUT_TYPE,
};

const GLenum __condRenderModeTable[] =
{
	GL_QUERY_WAIT,
	GL_QUERY_NO_WAIT,
	GL_QUERY_BY_REGION_WAIT,
	GL_QUERY_BY_REGION_NO_WAIT,
	GL_QUERY_WAIT_INVERTED,
	GL_QUERY_NO_WAIT_INVERTED,
	GL_QUERY_BY_REGION_WAIT_INVERTED,
	GL_QUERY_BY_REGION_NO_WAIT_INVERTED,
};

const GLenum __tfBufferModeTable[] =
{
	GL_INTERLEAVED_ATTRIBS,
	GL_SEPARATE_ATTRIBS,
};

const GLenum __vertConventionModeTable[] =
{
	GL_FIRST_VERTEX_CONVENTION,
	GL_LAST_VERTEX_CONVENTION,
};

const GLenum __fenceSyncConditionTable[] =
{
	GL_SYNC_GPU_COMMANDS_COMPLETE
};

const GLenum __syncWaitStatusTable[] =
{
	GL_ALREADY_SIGNALED,
	GL_TIMEOUT_EXPIRED,
	GL_CONDITION_SATISFIED,
	GL_WAIT_FAILED,
};

const GLenum __texSwizzleSourceTable[] =
{
	GL_RED,
	GL_GREEN,
	GL_BLUE,
	GL_ALPHA,
	GL_ZERO,
	GL_ONE,
};

const GLenum __texSwizzleDestTable[] =
{
	GL_TEXTURE_SWIZZLE_R,
	GL_TEXTURE_SWIZZLE_G,
	GL_TEXTURE_SWIZZLE_B,
	GL_TEXTURE_SWIZZLE_A,
};

const GLenum __featureSupportTable[] =
{
	GL_NONE,
	GL_CAVEAT_SUPPORT,
	GL_FULL_SUPPORT,
};

const GLenum __texComponentTypeTable[] =
{
	GL_NONE,
	GL_SIGNED_NORMALIZED,
	GL_UNSIGNED_NORMALIZED,
	GL_FLOAT,
	GL_INT,
	GL_UNSIGNED_INT,
};

const GLenum __colorEncodingTable[] =
{
	GL_NONE,
	GL_LINEAR,
	GL_SRGB,
};

const GLenum __imageClassTable[] =
{
	GL_NONE,
	GL_IMAGE_CLASS_4_X_32,
	GL_IMAGE_CLASS_2_X_32,
	GL_IMAGE_CLASS_1_X_32,
	GL_IMAGE_CLASS_4_X_16,
	GL_IMAGE_CLASS_2_X_16,
	GL_IMAGE_CLASS_1_X_16,
	GL_IMAGE_CLASS_4_X_8,
	GL_IMAGE_CLASS_2_X_8,
	GL_IMAGE_CLASS_1_X_8,
	GL_IMAGE_CLASS_11_11_10,
	GL_IMAGE_CLASS_10_10_10_2,
};

const GLenum __imageFormatCompatibilityTypeTable[] =
{
	GL_NONE,
	GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE,
	GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS,
};

const GLenum __viewClassTable[] =
{
	GL_NONE,
	GL_VIEW_CLASS_128_BITS,
	GL_VIEW_CLASS_96_BITS,
	GL_VIEW_CLASS_64_BITS,
	GL_VIEW_CLASS_48_BITS,
	GL_VIEW_CLASS_32_BITS,
	GL_VIEW_CLASS_24_BITS,
	GL_VIEW_CLASS_16_BITS,
	GL_VIEW_CLASS_8_BITS,
	GL_VIEW_CLASS_RGTC1_RED,
	GL_VIEW_CLASS_RGTC2_RG,
	GL_VIEW_CLASS_BPTC_UNORM,
	GL_VIEW_CLASS_BPTC_FLOAT,
};

const GLenum __depthStencilTexModeTable[] =
{
	GL_DEPTH_COMPONENT,
	GL_STENCIL_INDEX,
};

const GLenum __errorCodeTable[] =
{
	GL_NO_ERROR,
	GL_INVALID_ENUM,
	GL_INVALID_VALUE,
	GL_INVALID_OPERATION,
	GL_INVALID_FRAMEBUFFER_OPERATION,
	GL_OUT_OF_MEMORY,
	GL_STACK_UNDERFLOW,
	GL_STACK_OVERFLOW,
};

const GLenum __debugMessageSourceTable[] =
{
	GL_DEBUG_SOURCE_API,
	GL_DEBUG_SOURCE_WINDOW_SYSTEM,
	GL_DEBUG_SOURCE_SHADER_COMPILER,
	GL_DEBUG_SOURCE_THIRD_PARTY,
	GL_DEBUG_SOURCE_APPLICATION,
	GL_DEBUG_SOURCE_OTHER,
	GL_DONT_CARE,
};

const GLenum __debugMessageTypeTable[] =
{
	GL_DEBUG_TYPE_ERROR,
	GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR,
	GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR,
	GL_DEBUG_TYPE_PORTABILITY,
	GL_DEBUG_TYPE_PERFORMANCE,
	GL_DEBUG_TYPE_OTHER,
	GL_DEBUG_TYPE_MARKER,
	GL_DONT_CARE,
};

const GLenum __debugMessageSeverityTable[] =
{
	GL_DEBUG_SEVERITY_HIGH,
	GL_DEBUG_SEVERITY_MEDIUM,
	GL_DEBUG_SEVERITY_LOW,
	GL_DEBUG_SEVERITY_NOTIFICATION,
	GL_DONT_CARE,
};

const GLenum __clipOriginTable[] =
{
	GL_LOWER_LEFT,
	GL_UPPER_LEFT,
};

const GLenum __clipDepthTable[] =
{
	GL_NEGATIVE_ONE_TO_ONE,
	GL_ZERO_TO_ONE,
};


#define FROM_GL_ENUM_TABLE_LOOKUP(type, table) \
	type GetFromGLEnum_##type(GLenum value) { \
		for(size_t i = 0; i < (sizeof(table) / sizeof(*table)); ++i) { \
			if(value == table[i]) \
				return (type)i; } \
		assert(false); \
		return (type)-1; }

FROM_GL_ENUM_TABLE_LOOKUP(BufferType, __bufferTypeTable)
FROM_GL_ENUM_TABLE_LOOKUP(ShaderType, __shaderTypeTable)
FROM_GL_ENUM_TABLE_LOOKUP(TextureType, __textureTypeTable)
FROM_GL_ENUM_TABLE_LOOKUP(QueryType, __queryTypeTable)
FROM_GL_ENUM_TABLE_LOOKUP(DataType, __dataTypeTable)
FROM_GL_ENUM_TABLE_LOOKUP(ShaderDataType, __shaderDataTypeTable)
FROM_GL_ENUM_TABLE_LOOKUP(ImageFormat, __imageFormatTable)
FROM_GL_ENUM_TABLE_LOOKUP(PixelFormat, __pixelFormatTable)
FROM_GL_ENUM_TABLE_LOOKUP(CubeFace, __cubeFaceTable)
FROM_GL_ENUM_TABLE_LOOKUP(BufferAccess, __bufferAccessTable)
FROM_GL_ENUM_TABLE_LOOKUP(ColorBuffer, __colorBufferTable)
FROM_GL_ENUM_TABLE_LOOKUP(AttachmentBuffer, __attachmentBufferTable)
FROM_GL_ENUM_TABLE_LOOKUP(PolygonFace, __polygonFaceTable)
FROM_GL_ENUM_TABLE_LOOKUP(PrimitiveType, __primitiveTypeTable)
FROM_GL_ENUM_TABLE_LOOKUP(TessGenPrimitiveType, __tessGenPrimitiveTypeTable)
FROM_GL_ENUM_TABLE_LOOKUP(TessGenSpacing, __tessGenSpacingTable)
FROM_GL_ENUM_TABLE_LOOKUP(RasterMode, __rasterModeTable)
FROM_GL_ENUM_TABLE_LOOKUP(VertexWinding, __vertexOrderTable)
FROM_GL_ENUM_TABLE_LOOKUP(CompareFunc, __compareFuncTable)
FROM_GL_ENUM_TABLE_LOOKUP(StencilOp, __stencilOpTable)
FROM_GL_ENUM_TABLE_LOOKUP(BlendOp, __blendOpTable)
FROM_GL_ENUM_TABLE_LOOKUP(BlendFunc, __blendFuncTable)
FROM_GL_ENUM_TABLE_LOOKUP(ColorReadClamp, __colorReadClampTable)
FROM_GL_ENUM_TABLE_LOOKUP(LogicOp, __logicOpTable)
FROM_GL_ENUM_TABLE_LOOKUP(TexAddressMode, __texAddressingModeTable)
FROM_GL_ENUM_TABLE_LOOKUP(TexFilter, __texFilterTable)
FROM_GL_ENUM_TABLE_LOOKUP(TexCompareMode, __texCompareMode)
FROM_GL_ENUM_TABLE_LOOKUP(FramebufferStatus, __framebufferStatusTable)
FROM_GL_ENUM_TABLE_LOOKUP(SwapMethod, __swapMethodTable)
FROM_GL_ENUM_TABLE_LOOKUP(ColorBufferType, __colorBufferTypeTable)
FROM_GL_ENUM_TABLE_LOOKUP(ProgramParam, __programParamTable)
FROM_GL_ENUM_TABLE_LOOKUP(ConditionalRenderQueryMode, __condRenderModeTable)
FROM_GL_ENUM_TABLE_LOOKUP(TransformFeedbackBufferMode, __tfBufferModeTable)
FROM_GL_ENUM_TABLE_LOOKUP(VertexConvention, __vertConventionModeTable)
FROM_GL_ENUM_TABLE_LOOKUP(FenceSyncCondition, __fenceSyncConditionTable)
FROM_GL_ENUM_TABLE_LOOKUP(SyncWaitStatus, __syncWaitStatusTable)
FROM_GL_ENUM_TABLE_LOOKUP(TexSwizzleSource, __texSwizzleSourceTable)
FROM_GL_ENUM_TABLE_LOOKUP(TexSwizzleDest, __texSwizzleDestTable)
FROM_GL_ENUM_TABLE_LOOKUP(FeatureSupport, __featureSupportTable)
FROM_GL_ENUM_TABLE_LOOKUP(TextureComponentType, __texComponentTypeTable)
FROM_GL_ENUM_TABLE_LOOKUP(ColorEncoding, __colorEncodingTable)
FROM_GL_ENUM_TABLE_LOOKUP(ImageClass, __imageClassTable)
FROM_GL_ENUM_TABLE_LOOKUP(ImageFormatCompatibilityType, __imageFormatCompatibilityTypeTable)
FROM_GL_ENUM_TABLE_LOOKUP(ViewClass, __viewClassTable)
FROM_GL_ENUM_TABLE_LOOKUP(DepthStencilTexMode, __depthStencilTexModeTable)
FROM_GL_ENUM_TABLE_LOOKUP(ErrorCode, __errorCodeTable)
FROM_GL_ENUM_TABLE_LOOKUP(DebugMessageSource, __debugMessageSourceTable)
FROM_GL_ENUM_TABLE_LOOKUP(DebugMessageType, __debugMessageTypeTable)
FROM_GL_ENUM_TABLE_LOOKUP(DebugMessageSeverity, __debugMessageSeverityTable)
FROM_GL_ENUM_TABLE_LOOKUP(ResourceType, __resourceTypeTable)
FROM_GL_ENUM_TABLE_LOOKUP(ClipOrigin, __clipOriginTable)
FROM_GL_ENUM_TABLE_LOOKUP(ClipDepth, __clipDepthTable)

} // namespace gls::internals
